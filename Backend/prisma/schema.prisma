// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}

model user {
  id                BigInt             @id @default(autoincrement())
  email             String             @unique @db.VarChar(255)
  name              String             @db.VarChar(64)
  created_at        DateTime           @db.Timestamp(6)
  updated_at        DateTime           @db.Timestamp(6)
  
  // Relations
  interviews        interview[]
  questionSets      questionSet[]
  feedbackTemplates feedbackTemplate[]
}

model interview {
  id              BigInt         @id @default(autoincrement())
  user_id         BigInt
  question_set_id BigInt
  interviewed_at  DateTime
  created_at      DateTime
  updated_at      DateTime

  user        user              @relation(fields: [user_id], references: [id])
  questionSet questionSet       @relation(fields: [question_set_id], references: [id])
  answers     interviewAnswer[]

  @@index([user_id])
  @@index([question_set_id])
}

model questionSet {
  id         BigInt           @id @default(autoincrement())
  user_id    BigInt
  name       String           @db.VarChar(20)
  category   QuestionCategory
  created_at DateTime
  updated_at DateTime

  user       user              @relation(fields: [user_id], references: [id])
  interviews interview[]
  questions  question[]

  @@index([user_id])
}

model interviewAnswer {
  id              BigInt   @id @default(autoincrement())
  interview_id    BigInt
  question_id     BigInt
  sequence        Int
  audio_url       String   @db.VarChar(256)
  created_at      DateTime
  updated_at      DateTime

  interview   interview   @relation(fields: [interview_id], references: [id])
  question    question    @relation(fields: [question_id], references: [id])
  feedbacks   feedback[]

  @@index([interview_id])
  @@index([question_id])
}

model question {
  id              BigInt   @id @default(autoincrement())
  question_set_id BigInt
  content         String?  @db.Text
  order           Int?
  created_at      DateTime
  updated_at      DateTime

  questionSet questionSet @relation(fields: [question_set_id], references: [id])

  interviewAnswers interviewAnswer[] 
  feedbacks        feedback[]

  @@index([question_set_id])
}

model feedback {
  id                  BigInt   @id @default(autoincrement())
  interview_answer_id BigInt
  question_id         BigInt
  rating              Int
  feedback_text       String?  @db.Text
  created_at          DateTime
  updated_at          DateTime

  interviewAnswer interviewAnswer @relation(fields: [interview_answer_id], references: [id])
  question        question        @relation(fields: [question_id], references: [id])

  @@index([interview_answer_id])
  @@index([question_id])
}

model feedbackTemplate {
  id            BigInt           @id @default(autoincrement())
  user_id       BigInt
  category      FeedbackCategory
  template_text String?          @db.Text
  created_at    DateTime
  updated_at    DateTime

  user user @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

enum QuestionCategory {
  JOB         @map("직무역량")
  PERSONAL    @map("인성")
  MOTIVATION  @map("지원동기")
}

enum FeedbackCategory {
  JOB         @map("직무역량")
  PERSONAL    @map("인성")
  MOTIVATION  @map("지원동기")
}
